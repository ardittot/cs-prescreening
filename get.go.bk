package main

import (
	"gopkg.in/resty.v1"
	"fmt"
	"encoding/json"
	"encoding/gob"
	"os"
	// "runtime"
	"github.com/gin-gonic/gin"
	"net/http"
)

const FILE = "authtoken.gob"
const GRANT_TYPE = "client_credentials"
const CLIENT_ID = "9a8f6e1662c07e0df4f19c3852779a6ec6e14c22"
const CLIENT_SECRET = "770c62343f579a90fe43c1000b57344492ef1ba8"
const USERNAME = "ivojulistira@gmail.com"
const PASSWORD = "092215Conand"

var auth string

type Sicd struct {
	Name string
	Birth_date string
	Personal_number string
	Branch_code string
}

type Dh struct {
	Name string
	Birth_date string
}

type Token struct {
	Access_token string
	Expires_in uint64
	Token_type string
	Scope string
}

//Encode via gob to file
func Save (path string, object interface{}) error {
	file, err := os.Create(path)
	if err == nil {
		encoder := gob.NewEncoder(file)
		encoder.Encode(object)
	}
	file.Close()
	return err
}

//Encode via gob to file
func Load (path string, object interface{}) error {
	file, err := os.Open(path)
	if err == nil {
		decoder := gob.NewDecoder(file)
		err = decoder.Decode(object)
	}
	file.Close()
	return err
}
/*
func Check(e error) {
	if e != nil {
		_, file, line, _ := runtime.Caller(1)
		fmt.Println(line, "\t", file, "\n", e)
		os.Exit(1)
	}
}
*/
func main () {
	auth,_ = InitToken()
	router := gin.Default()
	router.POST("/sicd", RequestSICD)
	router.POST("/dhn", RequestDHN)
	router.Run("0.0.0.0:8000")	//Listen adn serve on 0.0.0.0:8000
}

func RequestToken() (auth string, success bool) {
	var auth_token = new (Token)
	body := `{"grant_type":"` + GRANT_TYPE + `", "client_id":"` + CLIENT_ID + `", "client_secret":"` + CLIENT_SECRET + `", "username":"` + USERNAME + `", "password":"` + PASSWORD + `"}`
	resp, err := resty.R().
		SetHeader("Content-Type", "application/json").
		SetBody(body).
		Post("http://sandbox.bri.co.id:82/oauth/token")
	if err==nil {
		if resp.Status() == "200 OK" {
			json.Unmarshal(resp.Body(), &auth_token)
			Save(FILE, auth_token)
			auth = `Bearer ` + auth_token.Access_token
			success = true
			return
		} else {
			// Error
			success = false
			return
		}
	} else {
		// Error
		success = false
		return
	}
}

func InitToken() (auth string, success bool) {
	var auth_token = new (Token)
	err := Load(FILE, auth_token)
	if err==nil {
		fmt.Println("Take from file")
		auth = `Bearer ` + auth_token.Access_token
		success = true
		return
	} else {
		fmt.Println("Take from new request")
		auth,success = RequestToken()
		return
	}
}

func RequestSICD (c *gin.Context) {

	var sicd Sicd
	var url string
	if err := c.ShouldBindJSON(&sicd); err == nil {
		url = "http://api.briconnect.bri.co.id/sid/sicd/" + sicd.Name + "/" + sicd.Birth_date + "/" + sicd.Personal_number + "/" + sicd.Branch_code
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}

	READ_WS_SICD: resp, err := resty.R().
		SetHeader("Authorization", auth).
		Get(url)
	if err==nil {
		if resp.Status() == "200 OK" {	//Auth token is valid
			c.String(http.StatusOK, resp.String()) 	//Send SICD data as response in JSON format
		} else {
			var resp_body map[string]interface{}
			json.Unmarshal(resp.Body(), &resp_body)
			// if resp_body.(struct{error string}).error == "invalid_token" {
			if resp_body["error"] == "invalid_token" {
				fmt.Println("Token "+ auth +" is not valid") // Auth token is not valid or expired 
				auth,_ = RequestToken()
				goto READ_WS_SICD
			} else {
				fmt.Printf("Error: %v\n",resp_body["message"])
				c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			}
		}
	} else {
		// Request Error
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}
}

func RequestDHN (c *gin.Context) {

	var dh Dh
	var url string
	if err := c.ShouldBindJSON(&dh); err == nil {
		url = "http://api.briconnect.bri.co.id/sid/dhn/"+ dh.Name + "/" + dh.Birth_date
	} else {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}

	READ_WS_DHN: resp, err := resty.R().
		SetHeader("Authorization", auth).
		Get(url)
	if err==nil {
		if resp.Status() == "200 OK" {	//Auth token is valid
			c.String(http.StatusOK, resp.String()) 	//Send SICD data as response in JSON format
		} else {
			var resp_body map[string]interface{}
			json.Unmarshal(resp.Body(), &resp_body)
			// if resp_body.(struct{error string}).error == "invalid_token" {
			if resp_body["error"] == "invalid_token" {
				fmt.Println("Token "+ auth +" is not valid") // Auth token is not valid or expired 
				auth,_ = RequestToken()
				goto READ_WS_DHN
			} else {
				fmt.Printf("Error: %v\n",resp_body["message"])
				c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			}
		}
	} else {
		// Request Error
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}
}
